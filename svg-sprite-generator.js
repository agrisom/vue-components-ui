const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const filename = 'public/sprite.svg';

exec('svg-sprite-generate -d ./src/assets/svg -o ./public/sprite.svg', (error, stdout, stderr) => {
  if (error) {
    console.error(`error: ${error.message}`);
    return;
  }
  if (stderr) {
    console.error(`stderr: ${stderr}`);
    return;
  }

  fs.readFile(filename, 'utf8', function (err, data) {
    if (!err && data) {
      const idx = data.indexOf('\n') ?? 0;
      let linesExceptFirst = data.substring(idx + 1);
      fs.writeFileSync(filename, linesExceptFirst);

      generateIconNameTypescriptDefinitions();
    }
  });
});

function generateIconNameTypescriptDefinitions() {
  const iconsDir = path.resolve(__dirname, 'src/assets/svg');
  const definitionsFile = path.resolve(__dirname, 'src/shared/types/icon.type.ts');
  const files = fs.readdirSync(iconsDir);
  const iconNames = files.map(file => file.match(/^(.+)\.svg$/)[1]);

  const typescriptDefinitions = `
/*
 * AUTOGENERATED FILE - DO NOT EDIT
 * Reload this file running this command 'npm run svg-sprite' or 'npm run build'
 */

export const listIcon = [${iconNames.map(name => `'${name}'`).join(', ')}] as const;
export type Icon = typeof listIcon[number];
`;

  fs.writeFileSync(definitionsFile, typescriptDefinitions);
}
